import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import accessoryService from '../api/accessoryService';
import brandService from '../api/brandService';
import phoneService from '../api/phoneService';
import Table from '../components/common/Table';
import Modal from '../components/common/Modal';
import Button from '../components/common/Button';
import Card from '../components/common/Card';
import { useForm } from 'react-hook-form';
const Accessories = () => {
    const [accessories, setAccessories] = useState([]);
    const [brands, setBrands] = useState([]);
    const [phones, setPhones] = useState([]);
    // Ensure arrays are always arrays
    const ensuredBrands = Array.isArray(brands) ? brands : [];
    const ensuredPhones = Array.isArray(phones) ? phones : [];
    const [isLoading, setIsLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingAccessory, setEditingAccessory] = useState(null);
    const [error, setError] = useState(null);
    const [selectedBrand, setSelectedBrand] = useState(null);
    const [selectedCategory, setSelectedCategory] = useState('');
    const [searchQuery, setSearchQuery] = useState('');
    const { register, handleSubmit, reset, formState: { errors } } = useForm();
    // Accessory categories
    const categories = [
        { value: 'case', label: 'Phone Case' },
        { value: 'charger', label: 'Charger' },
        { value: 'wired_headphones', label: 'Wired Headphones' },
        { value: 'wireless_headphones', label: 'Wireless Headphones' },
        { value: 'cable', label: 'Charging Cable' },
        { value: 'screen_protector', label: 'Screen Protector' },
        { value: 'power_bank', label: 'Power Bank' },
        { value: 'other', label: 'Other' }
    ];
    // Fetch accessories, brands, and phones on component mount
    useEffect(() => {
        fetchAccessories();
        fetchBrands();
        fetchPhones();
    }, []);
    const fetchAccessories = async (params) => {
        try {
            setIsLoading(true);
            const data = await accessoryService.getAllAccessories(params);
            setAccessories(data);
            setError(null);
        }
        catch (err) {
            console.error('Error fetching accessories:', err);
            setError('Failed to load accessories. Please try again.');
        }
        finally {
            setIsLoading(false);
        }
    };
    const fetchBrands = async () => {
        try {
            const data = await brandService.getAllBrands();
            setBrands(data);
        }
        catch (err) {
            console.error('Error fetching brands:', err);
        }
    };
    const fetchPhones = async () => {
        try {
            const data = await phoneService.getAllPhones();
            setPhones(data);
        }
        catch (err) {
            console.error('Error fetching phones:', err);
        }
    };
    const handleCreateAccessory = () => {
        setEditingAccessory(null);
        reset({
            name: '',
            brand: undefined,
            // code is autogenerated in the backend
            cost_price: 0,
            selling_unite_price: 0,
            accessory_category: 'other'
        });
        setIsModalOpen(true);
    };
    const handleEditAccessory = (accessory) => {
        setEditingAccessory(accessory);
        reset({
            name: accessory.name,
            brand: accessory.brand,
            // code is autogenerated in the backend
            cost_price: accessory.cost_price,
            selling_unite_price: accessory.selling_unite_price,
            selling_semi_bulk_price: accessory.selling_semi_bulk_price || undefined,
            selling_bulk_price: accessory.selling_bulk_price || undefined,
            description: accessory.description || '',
            note: accessory.note || '',
            // sku removed as requested
            accessory_category: accessory.accessory_category,
            color: accessory.color || '',
            material: accessory.material || '',
            compatible_phones: accessory.compatible_phones || [],
            voltage_v: accessory.voltage_v || undefined,
            amperage_a: accessory.amperage_a || undefined,
            wattage_w: accessory.wattage_w || undefined,
            battery_capacity_mah: accessory.battery_capacity_mah || undefined,
            cable_type: accessory.cable_type || '',
            length_cm: accessory.length_cm || undefined,
            connection_type: accessory.connection_type || '',
            wireless_range_m: accessory.wireless_range_m || undefined,
            noise_cancellation: accessory.noise_cancellation || false,
            hardness_rating: accessory.hardness_rating || '',
            finish: accessory.finish || ''
        });
        setIsModalOpen(true);
    };
    const handleDeleteAccessory = async (id) => {
        if (!window.confirm('Are you sure you want to delete this accessory?'))
            return;
        try {
            await accessoryService.deleteAccessory(id);
            setAccessories(accessories.filter(accessory => accessory.id !== id));
        }
        catch (err) {
            console.error('Error deleting accessory:', err);
            setError('Failed to delete accessory. Please try again.');
        }
    };
    const onSubmit = async (data) => {
        try {
            const formData = new FormData();
            // Add all form fields to FormData
            Object.keys(data).forEach(key => {
                if (data[key] !== undefined && data[key] !== null && data[key] !== '') {
                    if (key === 'compatible_phones' && Array.isArray(data[key])) {
                        // Handle array of compatible phones
                        data[key].forEach((phoneId) => {
                            formData.append('compatible_phones', phoneId.toString());
                        });
                    }
                    else if (key === 'noise_cancellation') {
                        // Handle boolean
                        formData.append(key, data[key] ? 'true' : 'false');
                    }
                    else {
                        formData.append(key, data[key]);
                    }
                }
            });
            // Handle file upload
            if (data.photo && data.photo[0]) {
                formData.append('photo', data.photo[0]);
            }
            if (editingAccessory) {
                await accessoryService.updateAccessory(editingAccessory.id, formData);
            }
            else {
                await accessoryService.createAccessory(formData);
            }
            setIsModalOpen(false);
            fetchAccessories();
        }
        catch (err) {
            console.error('Error saving accessory:', err);
            setError('Failed to save accessory. Please try again.');
        }
    };
    const handleSearch = () => {
        if (!searchQuery) {
            fetchAccessories();
            return;
        }
        // Determine if search query is a code or name
        if (/^[A-Z0-9-]+$/.test(searchQuery)) {
            // Looks like a code
            accessoryService.searchByCode(searchQuery)
                .then(data => {
                setAccessories(data);
                setError(null);
            })
                .catch(err => {
                console.error('Error searching accessories by code:', err);
                setError('Search failed. Please try again.');
            });
        }
        else {
            // Assume it's a name
            accessoryService.searchByName(searchQuery)
                .then(data => {
                setAccessories(data);
                setError(null);
            })
                .catch(err => {
                console.error('Error searching accessories by name:', err);
                setError('Search failed. Please try again.');
            });
        }
    };
    const handleBrandFilterChange = (e) => {
        const value = e.target.value;
        const brandId = value ? parseInt(value) : null;
        setSelectedBrand(brandId);
        const params = {};
        if (brandId)
            params.brand_id = brandId;
        if (selectedCategory)
            params.category = selectedCategory;
        fetchAccessories(params);
    };
    const handleCategoryFilterChange = (e) => {
        const value = e.target.value;
        setSelectedCategory(value);
        const params = {};
        if (selectedBrand)
            params.brand_id = selectedBrand;
        if (value)
            params.category = value;
        fetchAccessories(params);
    };
    const columns = [
        {
            header: 'Photo',
            accessor: 'photo',
            render: (value) => value ?
                _jsx("img", { src: value, alt: "Accessory", className: "w-12 h-12 object-contain" }) :
                _jsx("div", { className: "w-12 h-12 bg-gray-200 flex items-center justify-center text-xs", children: "No image" })
        },
        { header: 'Name', accessor: 'name' },
        { header: 'Code', accessor: 'code' },
        { header: 'Brand', accessor: 'brand_name' },
        {
            header: 'Category',
            accessor: 'accessory_category_display'
        },
        {
            header: 'Price',
            accessor: 'selling_unite_price',
            render: (value) => `$${value.toFixed(2)}`
        },
        {
            header: 'Stock',
            accessor: 'stock_quantity',
            render: (value) => (_jsx("span", { className: `badge ${value > 0 ? 'badge-success' : 'badge-error'}`, children: value }))
        },
        {
            header: 'Actions',
            accessor: 'id',
            render: (_, item) => (_jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { variant: "ghost", size: "sm", onClick: (e) => {
                            e.stopPropagation();
                            handleEditAccessory(item);
                        }, children: "Edit" }), _jsx(Button, { variant: "ghost", size: "sm", className: "text-error", onClick: (e) => {
                            e.stopPropagation();
                            handleDeleteAccessory(item.id);
                        }, children: "Delete" })] }))
        }
    ];
    return (_jsxs("div", { className: "p-6", children: [_jsxs("div", { className: "flex justify-between items-center mb-6", children: [_jsx("h1", { className: "text-2xl font-bold", children: "Accessories" }), _jsx(Button, { onClick: handleCreateAccessory, children: "Add Accessory" })] }), error && (_jsx("div", { className: "alert alert-error mb-4", children: _jsx("span", { children: error }) })), _jsxs("div", { className: "mb-4 flex flex-wrap gap-4", children: [_jsxs("div", { className: "form-control w-full max-w-xs", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Filter by Brand" }) }), _jsxs("select", { className: "select select-bordered", value: selectedBrand || '', onChange: handleBrandFilterChange, children: [_jsx("option", { value: "", children: "All Brands" }), ensuredBrands.map(brand => (_jsx("option", { value: brand.id, children: brand.name }, brand.id)))] })] }), _jsxs("div", { className: "form-control w-full max-w-xs", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Filter by Category" }) }), _jsxs("select", { className: "select select-bordered", value: selectedCategory, onChange: handleCategoryFilterChange, children: [_jsx("option", { value: "", children: "All Categories" }), categories.map(category => (_jsx("option", { value: category.value, children: category.label }, category.value)))] })] }), _jsxs("div", { className: "form-control w-full max-w-xs", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Search by Name or Code" }) }), _jsxs("div", { className: "flex", children: [_jsx("input", { type: "text", className: "input input-bordered w-full", value: searchQuery, onChange: (e) => setSearchQuery(e.target.value), placeholder: "Enter name or code" }), _jsx(Button, { className: "ml-2", onClick: handleSearch, children: "Search" })] })] })] }), _jsx(Card, { children: _jsx(Table, { columns: columns, data: accessories, isLoading: isLoading, onRowClick: handleEditAccessory }) }), _jsx(Modal, { isOpen: isModalOpen, onClose: () => setIsModalOpen(false), title: editingAccessory ? 'Edit Accessory' : 'Add Accessory', footer: _jsxs(_Fragment, { children: [_jsx(Button, { variant: "ghost", onClick: () => setIsModalOpen(false), children: "Cancel" }), _jsx(Button, { onClick: handleSubmit(onSubmit), children: "Save" })] }), size: "4xl", children: _jsxs("form", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Brand*" }) }), _jsxs("select", { className: `select select-bordered ${errors.brand ? 'select-error' : ''}`, ...register('brand', { required: 'Brand is required' }), children: [_jsx("option", { value: "", children: "Select a brand" }), ensuredBrands.map(brand => (_jsx("option", { value: brand.id, children: brand.name }, brand.id)))] }), errors.brand && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.brand.message }) }))] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Category*" }) }), _jsx("select", { className: `select select-bordered ${errors.accessory_category ? 'select-error' : ''}`, ...register('accessory_category', { required: 'Category is required' }), children: categories.map(category => (_jsx("option", { value: category.value, children: category.label }, category.value))) }), errors.accessory_category && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.accessory_category.message }) }))] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Name*" }) }), _jsx("input", { type: "text", className: `input input-bordered ${errors.name ? 'input-error' : ''}`, ...register('name', { required: 'Name is required' }) }), errors.name && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.name.message }) }))] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Cost Price*" }) }), _jsx("input", { type: "number", step: "0.01", className: `input input-bordered ${errors.cost_price ? 'input-error' : ''}`, ...register('cost_price', {
                                                required: 'Cost price is required',
                                                min: { value: 0, message: 'Price must be positive' }
                                            }) }), errors.cost_price && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.cost_price.message }) }))] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Selling Price (Unit)*" }) }), _jsx("input", { type: "number", step: "0.01", className: `input input-bordered ${errors.selling_unite_price ? 'input-error' : ''}`, ...register('selling_unite_price', {
                                                required: 'Selling price is required',
                                                min: { value: 0, message: 'Price must be positive' }
                                            }) }), errors.selling_unite_price && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.selling_unite_price.message }) }))] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Selling Price (Semi-Bulk)" }) }), _jsx("input", { type: "number", step: "0.01", min: "0", className: "input input-bordered", ...register('selling_semi_bulk_price') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Selling Price (Bulk)" }) }), _jsx("input", { type: "number", step: "0.01", min: "0", className: "input input-bordered", ...register('selling_bulk_price') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Color" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('color') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Material" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('material') })] })] }), _jsx("div", { className: "divider", children: "Compatible Phones" }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Compatible Phones" }) }), _jsx("select", { className: "select select-bordered", multiple: true, ...register('compatible_phones'), style: { height: '150px' }, children: ensuredPhones.map(phone => (_jsxs("option", { value: phone.id, children: [phone.name, " (", phone.code, ")"] }, phone.id))) }), _jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt", children: "Hold Ctrl/Cmd to select multiple phones" }) })] }), _jsx("div", { className: "divider", children: "Specifications" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Voltage (V)" }) }), _jsx("input", { type: "number", step: "0.1", min: "0", className: "input input-bordered", ...register('voltage_v') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Amperage (A)" }) }), _jsx("input", { type: "number", step: "0.1", min: "0", className: "input input-bordered", ...register('amperage_a') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Wattage (W)" }) }), _jsx("input", { type: "number", step: "0.1", min: "0", className: "input input-bordered", ...register('wattage_w') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Battery Capacity (mAh)" }) }), _jsx("input", { type: "number", min: "0", className: "input input-bordered", ...register('battery_capacity_mah') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Cable Type" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('cable_type'), placeholder: "e.g. USB-C to Lightning" })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Length (cm)" }) }), _jsx("input", { type: "number", min: "0", className: "input input-bordered", ...register('length_cm') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Connection Type" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('connection_type'), placeholder: "e.g. Bluetooth, 3.5mm" })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Wireless Range (m)" }) }), _jsx("input", { type: "number", min: "0", className: "input input-bordered", ...register('wireless_range_m') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Noise Cancellation" }) }), _jsx("div", { className: "form-control", children: _jsxs("label", { className: "label cursor-pointer justify-start gap-2", children: [_jsx("input", { type: "checkbox", className: "checkbox", ...register('noise_cancellation') }), _jsx("span", { className: "label-text", children: "Has noise cancellation" })] }) })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Hardness Rating" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('hardness_rating'), placeholder: "e.g. 9H" })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Finish" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('finish'), placeholder: "e.g. Matte, Glossy" })] })] }), _jsx("div", { className: "divider", children: "Additional Information" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Photo" }) }), _jsx("input", { type: "file", className: "file-input file-input-bordered w-full", accept: "image/*", ...register('photo') })] }), _jsxs("div", { className: "form-control md:col-span-2", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Description" }) }), _jsx("textarea", { className: "textarea textarea-bordered", rows: 3, ...register('description') })] }), _jsxs("div", { className: "form-control md:col-span-2", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Notes" }) }), _jsx("textarea", { className: "textarea textarea-bordered", rows: 3, ...register('note') })] })] })] }) })] }));
};
export default Accessories;
