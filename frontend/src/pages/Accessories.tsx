import React, { useState, useEffect } from 'react';
import accessoryService from '../api/accessoryService';
import type { Accessory } from '../api/accessoryService';
import brandService from '../api/brandService';
import type { Brand } from '../api/brandService';
import phoneService from '../api/phoneService';
import type { Phone } from '../api/phoneService';
import Table from '../components/common/Table';
import Modal from '../components/common/Modal';
import Button from '../components/common/Button';
import Card from '../components/common/Card';
import { useForm } from 'react-hook-form';
import { FiChevronLeft, FiChevronRight } from 'react-icons/fi';

const Accessories: React.FC = () => {
  const [accessories, setAccessories] = useState<Accessory[]>([]);
  const [brands, setBrands] = useState<Brand[]>([]);
  const [phones, setPhones] = useState<Phone[]>([]);
  
  // Ensure arrays are always arrays
  const ensuredBrands = Array.isArray(brands) ? brands : [];
  const ensuredPhones = Array.isArray(phones) ? phones : [];
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingAccessory, setEditingAccessory] = useState<Accessory | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [selectedBrand, setSelectedBrand] = useState<number | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [searchQuery, setSearchQuery] = useState('');
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [hasNextPage, setHasNextPage] = useState(false);
  const [hasPrevPage, setHasPrevPage] = useState(false);

  const { register, handleSubmit, reset, formState: { errors } } = useForm<Accessory>();

  // Accessory categories
  const categories = [
    { value: 'case', label: 'Phone Case' },
    { value: 'charger', label: 'Charger' },
    { value: 'wired_headphones', label: 'Wired Headphones' },
    { value: 'wireless_headphones', label: 'Wireless Headphones' },
    { value: 'cable', label: 'Charging Cable' },
    { value: 'screen_protector', label: 'Screen Protector' },
    { value: 'power_bank', label: 'Power Bank' },
    { value: 'other', label: 'Other' }
  ];

  // Fetch accessories, brands, and phones on component mount
  useEffect(() => {
    fetchAccessories();
    fetchBrands();
    fetchPhones();
  }, []);

  const fetchAccessories = async (params?: Record<string, any>) => {
    try {
      setIsLoading(true);
      
      // Add pagination parameters
      const paginationParams = {
        ...params,
        page: currentPage,
        page_size: pageSize
      };
      
      const data = await accessoryService.getAllAccessories(paginationParams);
      
      if (data && typeof data === 'object' && 'results' in data) {
        // Handle paginated response
        setAccessories(data.results);
        setTotalItems(data.count);
        setHasNextPage(!!data.next);
        setHasPrevPage(!!data.previous);
        setTotalPages(Math.ceil(data.count / pageSize));
      } else {
        // Fallback for non-paginated response
        setAccessories(Array.isArray(data) ? data : []);
        setTotalItems(Array.isArray(data) ? data.length : 0);
        setTotalPages(Math.ceil((Array.isArray(data) ? data.length : 0) / pageSize));
      }
      
      setError(null);
    } catch (err: any) {
      console.error('Error fetching accessories:', err);
      setError('Failed to load accessories. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchBrands = async () => {
    try {
      const data = await brandService.getAllBrands();
      setBrands(data);
    } catch (err: any) {
      console.error('Error fetching brands:', err);
    }
  };

  const fetchPhones = async () => {
    try {
      const data = await phoneService.getAllPhones();
      setPhones(data);
    } catch (err: any) {
      console.error('Error fetching phones:', err);
    }
  };

  const handleCreateAccessory = () => {
    setEditingAccessory(null);
    reset({
      name: '',
      brand: undefined,
      // code is autogenerated in the backend
      cost_price: 0,
      selling_unite_price: 0,
      accessory_category: 'other'
    });
    setIsModalOpen(true);
  };

  const handleEditAccessory = (accessory: Accessory) => {
    setEditingAccessory(accessory);
    
    reset({
      name: accessory.name,
      brand: accessory.brand,
      // code is autogenerated in the backend
      cost_price: accessory.cost_price,
      selling_unite_price: accessory.selling_unite_price,
      selling_semi_bulk_price: accessory.selling_semi_bulk_price || undefined,
      selling_bulk_price: accessory.selling_bulk_price || undefined,
      description: accessory.description || '',
      note: accessory.note || '',
      // sku removed as requested
      accessory_category: accessory.accessory_category,
      color: accessory.color || '',
      material: accessory.material || '',
      compatible_phones: accessory.compatible_phones || [],
      voltage_v: accessory.voltage_v || undefined,
      amperage_a: accessory.amperage_a || undefined,
      wattage_w: accessory.wattage_w || undefined,
      battery_capacity_mah: accessory.battery_capacity_mah || undefined,
      cable_type: accessory.cable_type || '',
      length_cm: accessory.length_cm || undefined,
      connection_type: accessory.connection_type || '',
      wireless_range_m: accessory.wireless_range_m || undefined,
      noise_cancellation: accessory.noise_cancellation || false,
      hardness_rating: accessory.hardness_rating || '',
      finish: accessory.finish || ''
    });
    setIsModalOpen(true);
  };

  const handleDeleteAccessory = async (id: number) => {
    if (!window.confirm('Are you sure you want to delete this accessory?')) return;
    
    try {
      await accessoryService.deleteAccessory(id);
      setAccessories(accessories.filter(accessory => accessory.id !== id));
    } catch (err: any) {
      console.error('Error deleting accessory:', err);
      setError('Failed to delete accessory. Please try again.');
    }
  };

  const onSubmit = async (data: any) => {
    try {
      const formData = new FormData();
      
      // Add all form fields to FormData
      Object.keys(data).forEach(key => {
        if (data[key] !== undefined && data[key] !== null && data[key] !== '') {
          if (key === 'compatible_phones' && Array.isArray(data[key])) {
            // Handle array of compatible phones
            data[key].forEach((phoneId: number) => {
              formData.append('compatible_phones', phoneId.toString());
            });
          } else if (key === 'noise_cancellation') {
            // Handle boolean
            formData.append(key, data[key] ? 'true' : 'false');
          } else {
            formData.append(key, data[key]);
          }
        }
      });
      
      // Handle file upload
      if (data.photo && data.photo[0]) {
        formData.append('photo', data.photo[0]);
      }
      
      if (editingAccessory) {
        await accessoryService.updateAccessory(editingAccessory.id, formData);
      } else {
        await accessoryService.createAccessory(formData);
      }
      
      setIsModalOpen(false);
      fetchAccessories();
    } catch (err: any) {
      console.error('Error saving accessory:', err);
      setError('Failed to save accessory. Please try again.');
    }
  };

  const handleSearch = () => {
    if (!searchQuery) {
      fetchAccessories();
      return;
    }
    
    setIsLoading(true);
    setCurrentPage(1); // Reset to first page on new search
    
    // Determine if search query is a code or name
    if (/^[A-Z0-9-]+$/.test(searchQuery)) {
      // Looks like a code
      accessoryService.searchByCode(searchQuery, currentPage, pageSize)
        .then(data => {
          if (data && typeof data === 'object' && 'results' in data) {
            setAccessories(data.results);
            setTotalItems(data.count);
            setHasNextPage(!!data.next);
            setHasPrevPage(!!data.previous);
            setTotalPages(Math.ceil(data.count / pageSize));
          } else {
            // Fallback for non-paginated response
            setAccessories(Array.isArray(data) ? data : []);
            setTotalItems(Array.isArray(data) ? data.length : 0);
            setTotalPages(Math.ceil((Array.isArray(data) ? data.length : 0) / pageSize));
          }
          setError(null);
        })
        .catch(err => {
          console.error('Error searching accessories by code:', err);
          setError('Search failed. Please try again.');
          setAccessories([]);
        })
        .finally(() => setIsLoading(false));
    } else {
      // Assume it's a name
      accessoryService.searchByName(searchQuery, currentPage, pageSize)
        .then(data => {
          if (data && typeof data === 'object' && 'results' in data) {
            setAccessories(data.results);
            setTotalItems(data.count);
            setHasNextPage(!!data.next);
            setHasPrevPage(!!data.previous);
            setTotalPages(Math.ceil(data.count / pageSize));
          } else {
            // Fallback for non-paginated response
            setAccessories(Array.isArray(data) ? data : []);
            setTotalItems(Array.isArray(data) ? data.length : 0);
            setTotalPages(Math.ceil((Array.isArray(data) ? data.length : 0) / pageSize));
          }
          setError(null);
        })
        .catch(err => {
          console.error('Error searching accessories by name:', err);
          setError('Search failed. Please try again.');
          setAccessories([]);
        })
        .finally(() => setIsLoading(false));
    }
  };

  const handleBrandFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    const brandId = value ? parseInt(value) : null;
    setSelectedBrand(brandId);
    setCurrentPage(1); // Reset to first page on filter change
    
    const params: Record<string, any> = {};
    if (brandId) params.brand_id = brandId;
    if (selectedCategory) params.category = selectedCategory;
    
    fetchAccessories(params);
  };

  const handleCategoryFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    setSelectedCategory(value);
    setCurrentPage(1); // Reset to first page on filter change
    
    if (value) {
      // Filter accessories by category
      fetchAccessories({ category: value });
    } else {
      // Reset to show all accessories
      fetchAccessories();
    }
  };

  const columns = [
    { 
      header: 'Photo', 
      accessor: 'photo',
      render: (value: string) => value ? 
        <img src={value} alt="Accessory" className="w-12 h-12 object-contain" /> : 
        <div className="w-12 h-12 bg-gray-200 flex items-center justify-center text-xs">No image</div>
    },
    { header: 'Name', accessor: 'name' },
    { header: 'Code', accessor: 'code' },
    { header: 'Brand', accessor: 'brand_name' },
    { 
      header: 'Category', 
      accessor: 'accessory_category_display' 
    },
    { 
      header: 'Price', 
      accessor: 'selling_unite_price',
      render: (value: number) => `$${value.toFixed(2)}`
    },
    { 
      header: 'Stock', 
      accessor: 'stock_quantity',
      render: (value: number) => (
        <span className={`badge ${value > 0 ? 'badge-success' : 'badge-error'}`}>
          {value}
        </span>
      )
    },
    {
      header: 'Actions',
      accessor: 'id',
      render: (_: any, item: Accessory) => (
        <div className="flex gap-2">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={(e) => {
              e.stopPropagation();
              handleEditAccessory(item);
            }}
          >
            Edit
          </Button>
          <Button 
            variant="ghost" 
            size="sm" 
            className="text-error" 
            onClick={(e) => {
              e.stopPropagation();
              handleDeleteAccessory(item.id);
            }}
          >
            Delete
          </Button>
        </div>
      )
    }
  ];

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Accessories</h1>
        <Button onClick={handleCreateAccessory}>Add Accessory</Button>
      </div>

      {error && (
        <div className="alert alert-error mb-4">
          <span>{error}</span>
        </div>
      )}

      <div className="mb-4 flex flex-wrap gap-4">
        <div className="form-control w-full max-w-xs">
          <label className="label">
            <span className="label-text">Filter by Brand</span>
          </label>
          <select 
            className="select select-bordered" 
            value={selectedBrand || ''}
            onChange={handleBrandFilterChange}
          >
            <option value="">All Brands</option>
            {ensuredBrands.map(brand => (
              <option key={brand.id} value={brand.id}>{brand.name}</option>
            ))}
          </select>
        </div>

        <div className="form-control w-full max-w-xs">
          <label className="label">
            <span className="label-text">Filter by Category</span>
          </label>
          <select 
            className="select select-bordered" 
            value={selectedCategory}
            onChange={handleCategoryFilterChange}
          >
            <option value="">All Categories</option>
            {categories.map(category => (
              <option key={category.value} value={category.value}>{category.label}</option>
            ))}
          </select>
        </div>

        <div className="form-control w-full max-w-xs">
          <label className="label">
            <span className="label-text">Search by Name or Code</span>
          </label>
          <div className="flex">
            <input 
              type="text" 
              className="input input-bordered w-full" 
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Enter name or code"
            />
            <Button 
              className="ml-2" 
              onClick={handleSearch}
            >
              Search
            </Button>
          </div>
        </div>
      </div>

      <Card>
        <Table 
          columns={columns} 
          data={accessories} 
          isLoading={isLoading} 
          onRowClick={handleEditAccessory}
        />
        
        {/* Server-side Pagination */}
        {totalItems > 0 && (
          <div className="flex justify-between items-center mt-6 px-4 py-3">
            <div className="text-sm text-base-content/70">
              Showing {accessories.length} of {totalItems} accessories
            </div>
            <div className="join">
              <button 
                className="join-item btn btn-sm"
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={!hasPrevPage}
              >
                <FiChevronLeft />
              </button>
              
              {/* Generate page buttons */}
              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                // Calculate which page numbers to show
                let pageNum;
                if (totalPages <= 5) {
                  // If 5 or fewer pages, show all
                  pageNum = i + 1;
                } else if (currentPage <= 3) {
                  // If near the start
                  pageNum = i + 1;
                } else if (currentPage >= totalPages - 2) {
                  // If near the end
                  pageNum = totalPages - 4 + i;
                } else {
                  // In the middle
                  pageNum = currentPage - 2 + i;
                }
                
                return (
                  <button 
                    key={pageNum} 
                    className={`join-item btn btn-sm ${currentPage === pageNum ? 'btn-active' : ''}`}
                    onClick={() => setCurrentPage(pageNum)}
                  >
                    {pageNum}
                  </button>
                );
              })}
              
              <button 
                className="join-item btn btn-sm"
                onClick={() => setCurrentPage(prev => prev + 1)}
                disabled={!hasNextPage}
              >
                <FiChevronRight />
              </button>
            </div>
          </div>
        )}
      </Card>

      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={editingAccessory ? 'Edit Accessory' : 'Add Accessory'}
        footer={
          <>
            <Button variant="ghost" onClick={() => setIsModalOpen(false)}>Cancel</Button>
            <Button onClick={handleSubmit(onSubmit)}>Save</Button>
          </>
        }
        size="4xl"
      >
        <form className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="form-control">
              <label className="label">
                <span className="label-text">Brand*</span>
              </label>
              <select
                className={`select select-bordered ${errors.brand ? 'select-error' : ''}`}
                {...register('brand', { required: 'Brand is required' })}
              >
                <option value="">Select a brand</option>
                {ensuredBrands.map(brand => (
                  <option key={brand.id} value={brand.id}>{brand.name}</option>
                ))}
              </select>
              {errors.brand && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.brand.message}</span>
                </label>
              )}
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Category*</span>
              </label>
              <select
                className={`select select-bordered ${errors.accessory_category ? 'select-error' : ''}`}
                {...register('accessory_category', { required: 'Category is required' })}
              >
                {categories.map(category => (
                  <option key={category.value} value={category.value}>{category.label}</option>
                ))}
              </select>
              {errors.accessory_category && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.accessory_category.message}</span>
                </label>
              )}
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Name*</span>
              </label>
              <input
                type="text"
                className={`input input-bordered ${errors.name ? 'input-error' : ''}`}
                {...register('name', { required: 'Name is required' })}
              />
              {errors.name && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.name.message}</span>
                </label>
              )}
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Cost Price*</span>
              </label>
              <input
                type="number"
                step="0.01"
                className={`input input-bordered ${errors.cost_price ? 'input-error' : ''}`}
                {...register('cost_price', { 
                  required: 'Cost price is required',
                  min: { value: 0, message: 'Price must be positive' }
                })}
              />
              {errors.cost_price && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.cost_price.message}</span>
                </label>
              )}
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Selling Price (Unit)*</span>
              </label>
              <input
                type="number"
                step="0.01"
                className={`input input-bordered ${errors.selling_unite_price ? 'input-error' : ''}`}
                {...register('selling_unite_price', { 
                  required: 'Selling price is required',
                  min: { value: 0, message: 'Price must be positive' }
                })}
              />
              {errors.selling_unite_price && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.selling_unite_price.message}</span>
                </label>
              )}
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Selling Price (Semi-Bulk)</span>
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                className="input input-bordered"
                {...register('selling_semi_bulk_price')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Selling Price (Bulk)</span>
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                className="input input-bordered"
                {...register('selling_bulk_price')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Color</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('color')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Material</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('material')}
              />
            </div>
          </div>

          <div className="divider">Compatible Phones</div>

          <div className="form-control">
            <label className="label">
              <span className="label-text">Compatible Phones</span>
            </label>
            <select
              className="select select-bordered"
              multiple
              {...register('compatible_phones')}
              style={{ height: '150px' }}
            >
              {ensuredPhones.map(phone => (
                <option key={phone.id} value={phone.id}>
                  {phone.name} ({phone.code})
                </option>
              ))}
            </select>
            <label className="label">
              <span className="label-text-alt">Hold Ctrl/Cmd to select multiple phones</span>
            </label>
          </div>

          <div className="divider">Specifications</div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Charger/Power Bank specific fields */}
            <div className="form-control">
              <label className="label">
                <span className="label-text">Voltage (V)</span>
              </label>
              <input
                type="number"
                step="0.1"
                min="0"
                className="input input-bordered"
                {...register('voltage_v')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Amperage (A)</span>
              </label>
              <input
                type="number"
                step="0.1"
                min="0"
                className="input input-bordered"
                {...register('amperage_a')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Wattage (W)</span>
              </label>
              <input
                type="number"
                step="0.1"
                min="0"
                className="input input-bordered"
                {...register('wattage_w')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Battery Capacity (mAh)</span>
              </label>
              <input
                type="number"
                min="0"
                className="input input-bordered"
                {...register('battery_capacity_mah')}
              />
            </div>

            {/* Cable specific fields */}
            <div className="form-control">
              <label className="label">
                <span className="label-text">Cable Type</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('cable_type')}
                placeholder="e.g. USB-C to Lightning"
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Length (cm)</span>
              </label>
              <input
                type="number"
                min="0"
                className="input input-bordered"
                {...register('length_cm')}
              />
            </div>

            {/* Headphone specific fields */}
            <div className="form-control">
              <label className="label">
                <span className="label-text">Connection Type</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('connection_type')}
                placeholder="e.g. Bluetooth, 3.5mm"
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Wireless Range (m)</span>
              </label>
              <input
                type="number"
                min="0"
                className="input input-bordered"
                {...register('wireless_range_m')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Noise Cancellation</span>
              </label>
              <div className="form-control">
                <label className="label cursor-pointer justify-start gap-2">
                  <input
                    type="checkbox"
                    className="checkbox"
                    {...register('noise_cancellation')}
                  />
                  <span className="label-text">Has noise cancellation</span>
                </label>
              </div>
            </div>

            {/* Screen protector specific fields */}
            <div className="form-control">
              <label className="label">
                <span className="label-text">Hardness Rating</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('hardness_rating')}
                placeholder="e.g. 9H"
              />
            </div>

            {/* Case specific fields */}
            <div className="form-control">
              <label className="label">
                <span className="label-text">Finish</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('finish')}
                placeholder="e.g. Matte, Glossy"
              />
            </div>
          </div>

          <div className="divider">Additional Information</div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* SKU field removed as requested */}

            <div className="form-control">
              <label className="label">
                <span className="label-text">Photo</span>
              </label>
              <input
                type="file"
                className="file-input file-input-bordered w-full"
                accept="image/*"
                {...register('photo')}
              />
            </div>

            <div className="form-control md:col-span-2">
              <label className="label">
                <span className="label-text">Description</span>
              </label>
              <textarea
                className="textarea textarea-bordered"
                rows={3}
                {...register('description')}
              ></textarea>
            </div>

            <div className="form-control md:col-span-2">
              <label className="label">
                <span className="label-text">Notes</span>
              </label>
              <textarea
                className="textarea textarea-bordered"
                rows={3}
                {...register('note')}
              ></textarea>
            </div>
          </div>
        </form>
      </Modal>
    </div>
  );
};

export default Accessories;
