import React, { useState, useEffect } from 'react';
import phoneService from '../api/phoneService';
import type { Phone } from '../api/phoneService';
import brandService from '../api/brandService';
import type { Brand } from '../api/brandService';
import modelService from '../api/modelService';
import type { Model } from '../api/modelService';
import Table from '../components/common/Table';
import Modal from '../components/common/Modal';
import Button from '../components/common/Button';
import Card from '../components/common/Card';
import { useForm } from 'react-hook-form';

const Phones: React.FC = () => {
  const [phones, setPhones] = useState<Phone[]>([]);
  const [brands, setBrands] = useState<Brand[]>([]);
  const [models, setModels] = useState<Model[]>([]);
  
  // Ensure brands and models are always arrays
  const ensuredBrands = Array.isArray(brands) ? brands : [];
  const ensuredModels = Array.isArray(models) ? models : [];
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingPhone, setEditingPhone] = useState<Phone | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [selectedBrand, setSelectedBrand] = useState<number | null>(null);
  const [searchQuery, setSearchQuery] = useState('');

  const { register, handleSubmit, reset, watch, setValue, formState: { errors } } = useForm<Phone>();

  // Fetch phones, brands, and models on component mount
  useEffect(() => {
    fetchPhones();
    fetchBrands();
    fetchModels();
  }, []);

  // We no longer need to filter models based on brand as we're showing all models
  // and letting the user select directly from the full list
  
  // Auto-populate phone name when model changes
  const watchedModel = watch('model');
  useEffect(() => {
    if (watchedModel) {
      const modelId = parseInt(watchedModel.toString());
      const selectedModel = models.find(model => model.id === modelId);
      const selectedBrand = brands.find(brand => brand.id === selectedModel?.brand);
      
      if (selectedModel && selectedBrand) {
        // Auto-populate the name field with brand and model names
        const autoName = `${selectedBrand.name} ${selectedModel.name}`;
        setValue('name', autoName);
        
        // If we have the model, we know the brand, so set it automatically
        setValue('brand', selectedModel.brand);
      }
    }
  }, [watchedModel, models, brands, setValue]);

  const fetchPhones = async (params?: Record<string, any>) => {
    try {
      setIsLoading(true);
      const data = await phoneService.getAllPhones(params);
      setPhones(data);
      setError(null);
    } catch (err: any) {
      console.error('Error fetching phones:', err);
      setError('Failed to load phones. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchBrands = async () => {
    try {
      const data = await brandService.getAllBrands();
      setBrands(data);
    } catch (err: any) {
      console.error('Error fetching brands:', err);
    }
  };

  const fetchModels = async () => {
    try {
      const data = await modelService.getAllModels();
      setModels(data);
    } catch (err: any) {
      console.error('Error fetching models:', err);
    }
  };

  const handleCreatePhone = () => {
    setEditingPhone(null);
    reset({
      name: '',
      brand: undefined,
      model: undefined,
      // code is autogenerated in the backend
      cost_price: 0,
      selling_unite_price: 0,
      condition: 'new',
      version: 'global',
      phone_type: 'ordinary'
    });
    setIsModalOpen(true);
  };

  const handleEditPhone = (phone: Phone) => {
    setEditingPhone(phone);
    // Set the model first
    setValue('model', phone.model);
    // Brand will be auto-set based on the model
    
    reset({
      name: phone.name,
      brand: phone.brand,
      model: phone.model,
      // code is autogenerated in the backend
      cost_price: phone.cost_price,
      selling_unite_price: phone.selling_unite_price,
      selling_semi_bulk_price: phone.selling_semi_bulk_price || undefined,
      selling_bulk_price: phone.selling_bulk_price || undefined,
      description: phone.description || '',
      note: phone.note || '',
      // sku removed as requested
      processor: phone.processor || '',
      ram_gb: phone.ram_gb || undefined,
      storage_gb: phone.storage_gb || undefined,
      screen_size_inch: phone.screen_size_inch || undefined,
      screen_type: phone.screen_type || '',
      operating_system: phone.operating_system || '',
      rear_camera_mp: phone.rear_camera_mp || '',
      front_camera_mp: phone.front_camera_mp || '',
      battery_mah: phone.battery_mah || undefined,
      color: phone.color || '',
      condition: phone.condition,
      version: phone.version,
      phone_type: phone.phone_type
    });
    setIsModalOpen(true);
  };

  const handleDeletePhone = async (id: number) => {
    if (!window.confirm('Are you sure you want to delete this phone?')) return;
    
    try {
      await phoneService.deletePhone(id);
      setPhones(phones.filter(phone => phone.id !== id));
    } catch (err: any) {
      console.error('Error deleting phone:', err);
      setError('Failed to delete phone. Please try again.');
    }
  };

  const onSubmit = async (data: any) => {
    try {
      const formData = new FormData();
      
      // Add all form fields to FormData
      Object.keys(data).forEach(key => {
        if (data[key] !== undefined && data[key] !== null && data[key] !== '') {
          formData.append(key, data[key]);
        }
      });
      
      // Handle file upload
      if (data.photo && data.photo[0]) {
        formData.append('photo', data.photo[0]);
      }
      
      if (editingPhone) {
        await phoneService.updatePhone(editingPhone.id, formData);
      } else {
        await phoneService.createPhone(formData);
      }
      
      setIsModalOpen(false);
      fetchPhones();
    } catch (err: any) {
      console.error('Error saving phone:', err);
      setError('Failed to save phone. Please try again.');
    }
  };

  const handleSearch = () => {
    if (!searchQuery) {
      fetchPhones();
      return;
    }
    
    // Determine if search query is a code or name
    if (/^[A-Z0-9-]+$/.test(searchQuery)) {
      // Looks like a code
      phoneService.searchByCode(searchQuery)
        .then(data => {
          setPhones(data);
          setError(null);
        })
        .catch(err => {
          console.error('Error searching phones by code:', err);
          setError('Search failed. Please try again.');
        });
    } else {
      // Assume it's a name
      phoneService.searchByName(searchQuery)
        .then(data => {
          setPhones(data);
          setError(null);
        })
        .catch(err => {
          console.error('Error searching phones by name:', err);
          setError('Search failed. Please try again.');
        });
    }
  };

  const handleBrandFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    const brandId = value ? parseInt(value) : null;
    setSelectedBrand(brandId);
    
    if (brandId) {
      fetchPhones({ brand_id: brandId });
    } else {
      fetchPhones();
    }
  };

  const columns = [
    { 
      header: 'Photo', 
      accessor: 'photo',
      render: (value: string) => value ? 
        <img src={value} alt="Phone" className="w-12 h-12 object-contain" /> : 
        <div className="w-12 h-12 bg-gray-200 flex items-center justify-center text-xs">No image</div>
    },
    { header: 'Name', accessor: 'name' },
    { header: 'Code', accessor: 'code' },
    { header: 'Brand', accessor: 'brand_name' },
    { header: 'Model', accessor: 'model_name' },
    { 
      header: 'Price', 
      accessor: 'selling_unite_price',
      render: (value: number) => `$${value.toFixed(2)}`
    },
    { 
      header: 'Stock', 
      accessor: 'stock_quantity',
      render: (value: number) => (
        <span className={`badge ${value > 0 ? 'badge-success' : 'badge-error'}`}>
          {value}
        </span>
      )
    },
    {
      header: 'Actions',
      accessor: 'id',
      render: (_: any, item: Phone) => (
        <div className="flex gap-2">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={(e) => {
              e.stopPropagation();
              handleEditPhone(item);
            }}
          >
            Edit
          </Button>
          <Button 
            variant="ghost" 
            size="sm" 
            className="text-error" 
            onClick={(e) => {
              e.stopPropagation();
              handleDeletePhone(item.id);
            }}
          >
            Delete
          </Button>
        </div>
      )
    }
  ];

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Phones</h1>
        <Button onClick={handleCreatePhone}>Add Phone</Button>
      </div>

      {error && (
        <div className="alert alert-error mb-4">
          <span>{error}</span>
        </div>
      )}

      <div className="mb-4 flex flex-wrap gap-4">
        <div className="form-control w-full max-w-xs">
          <label className="label">
            <span className="label-text">Filter by Brand</span>
          </label>
          <select 
            className="select select-bordered" 
            value={selectedBrand || ''}
            onChange={handleBrandFilterChange}
          >
            <option value="">All Brands</option>
            {ensuredBrands.map(brand => (
              <option key={brand.id} value={brand.id}>{brand.name}</option>
            ))}
          </select>
        </div>

        <div className="form-control w-full max-w-xs">
          <label className="label">
            <span className="label-text">Search by Name or Code</span>
          </label>
          <div className="flex">
            <input 
              type="text" 
              className="input input-bordered w-full" 
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Enter name or code"
            />
            <Button 
              className="ml-2" 
              onClick={handleSearch}
            >
              Search
            </Button>
          </div>
        </div>
      </div>

      <Card>
        <Table 
          columns={columns} 
          data={phones} 
          isLoading={isLoading} 
          onRowClick={handleEditPhone}
        />
      </Card>

      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title={editingPhone ? 'Edit Phone' : 'Add Phone'}
        footer={
          <>
            <Button variant="ghost" onClick={() => setIsModalOpen(false)}>Cancel</Button>
            <Button onClick={handleSubmit(onSubmit)}>Save</Button>
          </>
        }
       size="5xl"
      >
        <form className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="form-control md:col-span-2">
              <label className="label">
                <span className="label-text">Model*</span>
                <span className="label-text-alt text-info">Select a model first</span>
              </label>
              <select
                className={`select select-bordered ${errors.model ? 'select-error' : ''}`}
                {...register('model', { required: 'Model is required' })}
              >
                <option value="">Select a model</option>
                {ensuredModels.map((model: Model) => {
                  const brandName = ensuredBrands.find(b => b.id === model.brand)?.name || '';
                  return (
                    <option key={model.id} value={model.id}>{brandName} - {model.name}</option>
                  );
                })}
              </select>
              {errors.model && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.model.message}</span>
                </label>
              )}
            </div>

            <div className="form-control md:col-span-2">
              <label className="label">
                <span className="label-text">Photo</span>
              </label>
              <input
                type="file"
                className="file-input file-input-bordered w-full"
                accept="image/*"
                {...register('photo')}
              />
            </div>

            <div className="form-control md:col-span-2 hidden">
              <label className="label">
                <span className="label-text">Brand</span>
              </label>
              <select
                className="select select-bordered"
                {...register('brand')}
                disabled
              >
                <option value="">Auto-selected from model</option>
                {ensuredBrands.map(brand => (
                  <option key={brand.id} value={brand.id}>{brand.name}</option>
                ))}
              </select>
            </div>

            <div className="form-control md:col-span-4">
              <label className="label">
                <span className="label-text">Variant Name*</span>
                <span className="label-text-alt text-info">Auto-populated from model, add specifics like color, storage, etc.</span>
              </label>
              <input
                type="text"
                className={`input input-bordered ${errors.name ? 'input-error' : ''}`}
                {...register('name', { required: 'Variant name is required' })}
                placeholder="e.g. iPhone 14 Pro Max 256GB Black"
              />
              {errors.name && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.name.message}</span>
                </label>
              )}
            </div>

            {/* Code field removed as it's autogenerated in the backend */}

            <div className="form-control">
              <label className="label">
                <span className="label-text">Cost Price*</span>
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                className={`input input-bordered ${errors.cost_price ? 'input-error' : ''}`}
                {...register('cost_price', { 
                  required: 'Cost price is required',
                  min: { value: 0, message: 'Price must be positive' }
                })}
              />
              {errors.cost_price && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.cost_price.message}</span>
                </label>
              )}
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Selling Price (Unit)*</span>
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                className={`input input-bordered ${errors.selling_unite_price ? 'input-error' : ''}`}
                {...register('selling_unite_price', { 
                  required: 'Selling price is required',
                  min: { value: 0, message: 'Price must be positive' }
                })}
              />
              {errors.selling_unite_price && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.selling_unite_price.message}</span>
                </label>
              )}
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Selling Price (Semi-Bulk)</span>
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                className="input input-bordered"
                {...register('selling_semi_bulk_price')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Selling Price (Bulk)</span>
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                className="input input-bordered"
                {...register('selling_bulk_price')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Condition*</span>
              </label>
              <select
                className={`select select-bordered ${errors.condition ? 'select-error' : ''}`}
                {...register('condition', { required: 'Condition is required' })}
              >
                <option value="NEW">New</option>
                <option value="USED">Used</option>
                <option value="REFURBISHED">Refurbished</option>
              </select>
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Version*</span>
              </label>
              <select
                className={`select select-bordered ${errors.version ? 'select-error' : ''}`}
                {...register('version', { required: 'Version is required' })}
              >
                <option value="ORIGINAL">Original</option>
                <option value="HIGH_COPY">High Copy</option>
                <option value="COPY">Copy</option>
              </select>
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Phone Type*</span>
              </label>
              <select
                className={`select select-bordered ${errors.phone_type ? 'select-error' : ''}`}
                {...register('phone_type', { required: 'Phone type is required' })}
              >
                <option value="SMARTPHONE">Smartphone</option>
                <option value="FEATURE_PHONE">Feature Phone</option>
                <option value="TABLET">Tablet</option>
              </select>
            </div>
          </div>

          <div className="divider">Specifications</div>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="form-control">
              <label className="label">
                <span className="label-text">Processor</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('processor')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">RAM (GB)</span>
              </label>
              <input
                type="number"
                min="0"
                className="input input-bordered"
                {...register('ram_gb')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Storage (GB)</span>
              </label>
              <input
                type="number"
                min="0"
                className="input input-bordered"
                {...register('storage_gb')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Screen Size (inches)</span>
              </label>
              <input
                type="number"
                step="0.1"
                className="input input-bordered"
                {...register('screen_size_inch')}
              />
            </div>
            
            <div className="form-control">
              <label className="label">
                <span className="label-text">Operating System</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('operating_system')}
                placeholder="e.g. Android 13, iOS 16"
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Screen Type</span>
              </label>
              <select className="select select-bordered" {...register('screen_type')}>
                <option value="">Select Screen Type</option>
                <option value="oled">OLED</option>
                <option value="amoled">AMOLED</option>
                <option value="lcd">LCD</option>
                <option value="ips_lcd">IPS LCD</option>
                <option value="retina">Retina</option>
                <option value="dynamic_amoled">Dynamic AMOLED</option>
                <option value="other">Other</option>
              </select>
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Rear Camera (MP)</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('rear_camera_mp')}
                placeholder="e.g. 48MP+12MP+5MP"
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Front Camera (MP)</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('front_camera_mp')}
                placeholder="e.g. 16MP"
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Battery (mAh)</span>
              </label>
              <input
                type="number"
                min="0"
                className="input input-bordered"
                {...register('battery_mah')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Color</span>
              </label>
              <input
                type="text"
                className="input input-bordered"
                {...register('color')}
              />
            </div>
          </div>

          <div className="divider">Additional Information</div>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* SKU field removed as requested */}



            <div className="form-control md:col-span-4">
              <label className="label">
                <span className="label-text">Description</span>
              </label>
              <textarea
                className="textarea textarea-bordered"
                rows={3}
                {...register('description')}
              ></textarea>
            </div>

            <div className="form-control md:col-span-4">
              <label className="label">
                <span className="label-text">Notes</span>
              </label>
              <textarea
                className="textarea textarea-bordered"
                rows={3}
                {...register('note')}
              ></textarea>
            </div>
          </div>
        </form>
      </Modal>
    </div>
  );
};

export default Phones;
