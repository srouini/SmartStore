import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import phoneService from '../api/phoneService';
import brandService from '../api/brandService';
import modelService from '../api/modelService';
import Table from '../components/common/Table';
import Modal from '../components/common/Modal';
import Button from '../components/common/Button';
import Card from '../components/common/Card';
import { useForm } from 'react-hook-form';
const Phones = () => {
    const [phones, setPhones] = useState([]);
    const [brands, setBrands] = useState([]);
    const [models, setModels] = useState([]);
    // Ensure brands and models are always arrays
    const ensuredBrands = Array.isArray(brands) ? brands : [];
    const ensuredModels = Array.isArray(models) ? models : [];
    const [isLoading, setIsLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingPhone, setEditingPhone] = useState(null);
    const [error, setError] = useState(null);
    const [selectedBrand, setSelectedBrand] = useState(null);
    const [searchQuery, setSearchQuery] = useState('');
    const { register, handleSubmit, reset, watch, setValue, formState: { errors } } = useForm();
    // Fetch phones, brands, and models on component mount
    useEffect(() => {
        fetchPhones();
        fetchBrands();
        fetchModels();
    }, []);
    // We no longer need to filter models based on brand as we're showing all models
    // and letting the user select directly from the full list
    // Auto-populate phone name when model changes
    const watchedModel = watch('model');
    useEffect(() => {
        if (watchedModel) {
            const modelId = parseInt(watchedModel.toString());
            const selectedModel = models.find(model => model.id === modelId);
            const selectedBrand = brands.find(brand => brand.id === selectedModel?.brand);
            if (selectedModel && selectedBrand) {
                // Auto-populate the name field with brand and model names
                const autoName = `${selectedBrand.name} ${selectedModel.name}`;
                setValue('name', autoName);
                // If we have the model, we know the brand, so set it automatically
                setValue('brand', selectedModel.brand);
            }
        }
    }, [watchedModel, models, brands, setValue]);
    const fetchPhones = async (params) => {
        try {
            setIsLoading(true);
            const data = await phoneService.getAllPhones(params);
            setPhones(data);
            setError(null);
        }
        catch (err) {
            console.error('Error fetching phones:', err);
            setError('Failed to load phones. Please try again.');
        }
        finally {
            setIsLoading(false);
        }
    };
    const fetchBrands = async () => {
        try {
            const data = await brandService.getAllBrands();
            setBrands(data);
        }
        catch (err) {
            console.error('Error fetching brands:', err);
        }
    };
    const fetchModels = async () => {
        try {
            const data = await modelService.getAllModels();
            setModels(data);
        }
        catch (err) {
            console.error('Error fetching models:', err);
        }
    };
    const handleCreatePhone = () => {
        setEditingPhone(null);
        reset({
            name: '',
            brand: undefined,
            model: undefined,
            // code is autogenerated in the backend
            cost_price: 0,
            selling_unite_price: 0,
            condition: 'new',
            version: 'global',
            phone_type: 'ordinary'
        });
        setIsModalOpen(true);
    };
    const handleEditPhone = (phone) => {
        setEditingPhone(phone);
        // Set the model first
        setValue('model', phone.model);
        // Brand will be auto-set based on the model
        reset({
            name: phone.name,
            brand: phone.brand,
            model: phone.model,
            // code is autogenerated in the backend
            cost_price: phone.cost_price,
            selling_unite_price: phone.selling_unite_price,
            selling_semi_bulk_price: phone.selling_semi_bulk_price || undefined,
            selling_bulk_price: phone.selling_bulk_price || undefined,
            description: phone.description || '',
            note: phone.note || '',
            // sku removed as requested
            processor: phone.processor || '',
            ram_gb: phone.ram_gb || undefined,
            storage_gb: phone.storage_gb || undefined,
            screen_size_inch: phone.screen_size_inch || undefined,
            screen_type: phone.screen_type || '',
            operating_system: phone.operating_system || '',
            rear_camera_mp: phone.rear_camera_mp || '',
            front_camera_mp: phone.front_camera_mp || '',
            battery_mah: phone.battery_mah || undefined,
            color: phone.color || '',
            condition: phone.condition,
            version: phone.version,
            phone_type: phone.phone_type
        });
        setIsModalOpen(true);
    };
    const handleDeletePhone = async (id) => {
        if (!window.confirm('Are you sure you want to delete this phone?'))
            return;
        try {
            await phoneService.deletePhone(id);
            setPhones(phones.filter(phone => phone.id !== id));
        }
        catch (err) {
            console.error('Error deleting phone:', err);
            setError('Failed to delete phone. Please try again.');
        }
    };
    const onSubmit = async (data) => {
        try {
            const formData = new FormData();
            // Add all form fields to FormData
            Object.keys(data).forEach(key => {
                if (data[key] !== undefined && data[key] !== null && data[key] !== '') {
                    formData.append(key, data[key]);
                }
            });
            // Handle file upload
            if (data.photo && data.photo[0]) {
                formData.append('photo', data.photo[0]);
            }
            if (editingPhone) {
                await phoneService.updatePhone(editingPhone.id, formData);
            }
            else {
                await phoneService.createPhone(formData);
            }
            setIsModalOpen(false);
            fetchPhones();
        }
        catch (err) {
            console.error('Error saving phone:', err);
            setError('Failed to save phone. Please try again.');
        }
    };
    const handleSearch = () => {
        if (!searchQuery) {
            fetchPhones();
            return;
        }
        // Determine if search query is a code or name
        if (/^[A-Z0-9-]+$/.test(searchQuery)) {
            // Looks like a code
            phoneService.searchByCode(searchQuery)
                .then(data => {
                setPhones(data);
                setError(null);
            })
                .catch(err => {
                console.error('Error searching phones by code:', err);
                setError('Search failed. Please try again.');
            });
        }
        else {
            // Assume it's a name
            phoneService.searchByName(searchQuery)
                .then(data => {
                setPhones(data);
                setError(null);
            })
                .catch(err => {
                console.error('Error searching phones by name:', err);
                setError('Search failed. Please try again.');
            });
        }
    };
    const handleBrandFilterChange = (e) => {
        const value = e.target.value;
        const brandId = value ? parseInt(value) : null;
        setSelectedBrand(brandId);
        if (brandId) {
            fetchPhones({ brand_id: brandId });
        }
        else {
            fetchPhones();
        }
    };
    const columns = [
        {
            header: 'Photo',
            accessor: 'photo',
            render: (value) => value ?
                _jsx("img", { src: value, alt: "Phone", className: "w-12 h-12 object-contain" }) :
                _jsx("div", { className: "w-12 h-12 bg-gray-200 flex items-center justify-center text-xs", children: "No image" })
        },
        { header: 'Name', accessor: 'name' },
        { header: 'Code', accessor: 'code' },
        { header: 'Brand', accessor: 'brand_name' },
        { header: 'Model', accessor: 'model_name' },
        {
            header: 'Price',
            accessor: 'selling_unite_price',
            render: (value) => `$${value.toFixed(2)}`
        },
        {
            header: 'Stock',
            accessor: 'stock_quantity',
            render: (value) => (_jsx("span", { className: `badge ${value > 0 ? 'badge-success' : 'badge-error'}`, children: value }))
        },
        {
            header: 'Actions',
            accessor: 'id',
            render: (_, item) => (_jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { variant: "ghost", size: "sm", onClick: (e) => {
                            e.stopPropagation();
                            handleEditPhone(item);
                        }, children: "Edit" }), _jsx(Button, { variant: "ghost", size: "sm", className: "text-error", onClick: (e) => {
                            e.stopPropagation();
                            handleDeletePhone(item.id);
                        }, children: "Delete" })] }))
        }
    ];
    return (_jsxs("div", { className: "p-6", children: [_jsxs("div", { className: "flex justify-between items-center mb-6", children: [_jsx("h1", { className: "text-2xl font-bold", children: "Phones" }), _jsx(Button, { onClick: handleCreatePhone, children: "Add Phone" })] }), error && (_jsx("div", { className: "alert alert-error mb-4", children: _jsx("span", { children: error }) })), _jsxs("div", { className: "mb-4 flex flex-wrap gap-4", children: [_jsxs("div", { className: "form-control w-full max-w-xs", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Filter by Brand" }) }), _jsxs("select", { className: "select select-bordered", value: selectedBrand || '', onChange: handleBrandFilterChange, children: [_jsx("option", { value: "", children: "All Brands" }), ensuredBrands.map(brand => (_jsx("option", { value: brand.id, children: brand.name }, brand.id)))] })] }), _jsxs("div", { className: "form-control w-full max-w-xs", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Search by Name or Code" }) }), _jsxs("div", { className: "flex", children: [_jsx("input", { type: "text", className: "input input-bordered w-full", value: searchQuery, onChange: (e) => setSearchQuery(e.target.value), placeholder: "Enter name or code" }), _jsx(Button, { className: "ml-2", onClick: handleSearch, children: "Search" })] })] })] }), _jsx(Card, { children: _jsx(Table, { columns: columns, data: phones, isLoading: isLoading, onRowClick: handleEditPhone }) }), _jsx(Modal, { isOpen: isModalOpen, onClose: () => setIsModalOpen(false), title: editingPhone ? 'Edit Phone' : 'Add Phone', footer: _jsxs(_Fragment, { children: [_jsx(Button, { variant: "ghost", onClick: () => setIsModalOpen(false), children: "Cancel" }), _jsx(Button, { onClick: handleSubmit(onSubmit), children: "Save" })] }), size: "5xl", children: _jsxs("form", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsxs("div", { className: "form-control md:col-span-2", children: [_jsxs("label", { className: "label", children: [_jsx("span", { className: "label-text", children: "Model*" }), _jsx("span", { className: "label-text-alt text-info", children: "Select a model first" })] }), _jsxs("select", { className: `select select-bordered ${errors.model ? 'select-error' : ''}`, ...register('model', { required: 'Model is required' }), children: [_jsx("option", { value: "", children: "Select a model" }), ensuredModels.map((model) => {
                                                    const brandName = ensuredBrands.find(b => b.id === model.brand)?.name || '';
                                                    return (_jsxs("option", { value: model.id, children: [brandName, " - ", model.name] }, model.id));
                                                })] }), errors.model && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.model.message }) }))] }), _jsxs("div", { className: "form-control md:col-span-2", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Photo" }) }), _jsx("input", { type: "file", className: "file-input file-input-bordered w-full", accept: "image/*", ...register('photo') })] }), _jsxs("div", { className: "form-control md:col-span-2 hidden", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Brand" }) }), _jsxs("select", { className: "select select-bordered", ...register('brand'), disabled: true, children: [_jsx("option", { value: "", children: "Auto-selected from model" }), ensuredBrands.map(brand => (_jsx("option", { value: brand.id, children: brand.name }, brand.id)))] })] }), _jsxs("div", { className: "form-control md:col-span-4", children: [_jsxs("label", { className: "label", children: [_jsx("span", { className: "label-text", children: "Variant Name*" }), _jsx("span", { className: "label-text-alt text-info", children: "Auto-populated from model, add specifics like color, storage, etc." })] }), _jsx("input", { type: "text", className: `input input-bordered ${errors.name ? 'input-error' : ''}`, ...register('name', { required: 'Variant name is required' }), placeholder: "e.g. iPhone 14 Pro Max 256GB Black" }), errors.name && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.name.message }) }))] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Cost Price*" }) }), _jsx("input", { type: "number", step: "0.01", min: "0", className: `input input-bordered ${errors.cost_price ? 'input-error' : ''}`, ...register('cost_price', {
                                                required: 'Cost price is required',
                                                min: { value: 0, message: 'Price must be positive' }
                                            }) }), errors.cost_price && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.cost_price.message }) }))] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Selling Price (Unit)*" }) }), _jsx("input", { type: "number", step: "0.01", min: "0", className: `input input-bordered ${errors.selling_unite_price ? 'input-error' : ''}`, ...register('selling_unite_price', {
                                                required: 'Selling price is required',
                                                min: { value: 0, message: 'Price must be positive' }
                                            }) }), errors.selling_unite_price && (_jsx("label", { className: "label", children: _jsx("span", { className: "label-text-alt text-error", children: errors.selling_unite_price.message }) }))] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Selling Price (Semi-Bulk)" }) }), _jsx("input", { type: "number", step: "0.01", min: "0", className: "input input-bordered", ...register('selling_semi_bulk_price') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Selling Price (Bulk)" }) }), _jsx("input", { type: "number", step: "0.01", min: "0", className: "input input-bordered", ...register('selling_bulk_price') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Condition*" }) }), _jsxs("select", { className: `select select-bordered ${errors.condition ? 'select-error' : ''}`, ...register('condition', { required: 'Condition is required' }), children: [_jsx("option", { value: "NEW", children: "New" }), _jsx("option", { value: "USED", children: "Used" }), _jsx("option", { value: "REFURBISHED", children: "Refurbished" })] })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Version*" }) }), _jsxs("select", { className: `select select-bordered ${errors.version ? 'select-error' : ''}`, ...register('version', { required: 'Version is required' }), children: [_jsx("option", { value: "ORIGINAL", children: "Original" }), _jsx("option", { value: "HIGH_COPY", children: "High Copy" }), _jsx("option", { value: "COPY", children: "Copy" })] })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Phone Type*" }) }), _jsxs("select", { className: `select select-bordered ${errors.phone_type ? 'select-error' : ''}`, ...register('phone_type', { required: 'Phone type is required' }), children: [_jsx("option", { value: "SMARTPHONE", children: "Smartphone" }), _jsx("option", { value: "FEATURE_PHONE", children: "Feature Phone" }), _jsx("option", { value: "TABLET", children: "Tablet" })] })] })] }), _jsx("div", { className: "divider", children: "Specifications" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Processor" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('processor') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "RAM (GB)" }) }), _jsx("input", { type: "number", min: "0", className: "input input-bordered", ...register('ram_gb') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Storage (GB)" }) }), _jsx("input", { type: "number", min: "0", className: "input input-bordered", ...register('storage_gb') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Screen Size (inches)" }) }), _jsx("input", { type: "number", step: "0.1", className: "input input-bordered", ...register('screen_size_inch') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Operating System" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('operating_system'), placeholder: "e.g. Android 13, iOS 16" })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Screen Type" }) }), _jsxs("select", { className: "select select-bordered", ...register('screen_type'), children: [_jsx("option", { value: "", children: "Select Screen Type" }), _jsx("option", { value: "oled", children: "OLED" }), _jsx("option", { value: "amoled", children: "AMOLED" }), _jsx("option", { value: "lcd", children: "LCD" }), _jsx("option", { value: "ips_lcd", children: "IPS LCD" }), _jsx("option", { value: "retina", children: "Retina" }), _jsx("option", { value: "dynamic_amoled", children: "Dynamic AMOLED" }), _jsx("option", { value: "other", children: "Other" })] })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Rear Camera (MP)" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('rear_camera_mp'), placeholder: "e.g. 48MP+12MP+5MP" })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Front Camera (MP)" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('front_camera_mp'), placeholder: "e.g. 16MP" })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Battery (mAh)" }) }), _jsx("input", { type: "number", min: "0", className: "input input-bordered", ...register('battery_mah') })] }), _jsxs("div", { className: "form-control", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Color" }) }), _jsx("input", { type: "text", className: "input input-bordered", ...register('color') })] })] }), _jsx("div", { className: "divider", children: "Additional Information" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsxs("div", { className: "form-control md:col-span-4", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Description" }) }), _jsx("textarea", { className: "textarea textarea-bordered", rows: 3, ...register('description') })] }), _jsxs("div", { className: "form-control md:col-span-4", children: [_jsx("label", { className: "label", children: _jsx("span", { className: "label-text", children: "Notes" }) }), _jsx("textarea", { className: "textarea textarea-bordered", rows: 3, ...register('note') })] })] })] }) })] }));
};
export default Phones;
