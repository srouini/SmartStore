import React, { useState, useEffect } from 'react';
import supplierService from '../api/supplierService';
import { Supplier } from '../api/purchaseService';
import Table from '../components/common/Table';
import Modal from '../components/common/Modal';
import Button from '../components/common/Button';
import Card from '../components/common/Card';
import { useForm } from 'react-hook-form';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { FiPlus, FiSearch, FiEdit2, FiTrash2, FiX, FiCheck, FiPhone, FiMail, FiFileText, FiUser, FiAlertCircle, FiLogIn } from 'react-icons/fi';

const Suppliers: React.FC = () => {
  const { user, loading: authLoading } = useAuth();
  const navigate = useNavigate();
  
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const ensuredSuppliers = Array.isArray(suppliers) ? suppliers : [];
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [editingSupplier, setEditingSupplier] = useState<Supplier | null>(null);
  const [supplierToDelete, setSupplierToDelete] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  const [authError, setAuthError] = useState<boolean>(false);

  const { register, handleSubmit, reset, formState: { errors } } = useForm<any>({
    defaultValues: {
      name: '',
      address: '',
      email: '',
      tel: '',
      code: '',
      RC: '',
      NIF: '',
      AI: '',
      NIS: '',
      soumis_tva: true
    }
  });

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!authLoading && !user) {
      setAuthError(true);
    }
  }, [user, authLoading]);

  // Fetch suppliers on component mount if authenticated
  useEffect(() => {
    if (user) {
      fetchSuppliers();
    }
  }, [user]);

  const fetchSuppliers = async (params?: Record<string, any>) => {
    try {
      setIsLoading(true);
      const data = await supplierService.getAllSuppliers(params);
      setSuppliers(data);
      setError(null);
      
      // If no suppliers exist, show a message about adding sample data
      if (Array.isArray(data) && data.length === 0) {
        setError('No suppliers found. You can add suppliers manually or create sample data.');
      }
    } catch (err: any) {
      console.error('Error fetching suppliers:', err);
      setError('Failed to load suppliers. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };
  
  // Function to create sample supplier data
  const createSampleData = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Sample supplier data
      const sampleSuppliers = [
        {
          name: 'Tech Solutions Inc.',
          address: '123 Tech Blvd, Silicon Valley, CA 94043',
          email: 'contact@techsolutions.com',
          tel: '+1 (555) 123-4567',
          code: 'TS-001',
          RC: 'RC12345',
          NIF: 'NIF54321',
          AI: 'AI-98765',
          NIS: 'NIS-12345',
          soumis_tva: true
        },
        {
          name: 'Global Gadgets Ltd.',
          address: '456 Innovation Way, New York, NY 10001',
          email: 'sales@globalgadgets.com',
          tel: '+1 (555) 987-6543',
          code: 'GG-002',
          RC: 'RC67890',
          NIF: 'NIF09876',
          AI: 'AI-54321',
          NIS: 'NIS-67890',
          soumis_tva: true
        },
        {
          name: 'Mobile Masters',
          address: '789 Wireless Road, Chicago, IL 60601',
          email: 'info@mobilemasters.com',
          tel: '+1 (555) 456-7890',
          code: 'MM-003',
          RC: 'RC13579',
          NIF: 'NIF24680',
          AI: 'AI-97531',
          NIS: 'NIS-86420',
          soumis_tva: false
        },
        {
          name: 'Phone Warehouse',
          address: '321 Cellular Street, Los Angeles, CA 90001',
          email: 'support@phonewarehouse.com',
          tel: '+1 (555) 789-0123',
          code: 'PW-004',
          RC: 'RC24680',
          NIF: 'NIF13579',
          AI: 'AI-86420',
          NIS: 'NIS-97531',
          soumis_tva: true
        },
        {
          name: 'Accessory World',
          address: '654 Component Avenue, Miami, FL 33101',
          email: 'orders@accessoryworld.com',
          tel: '+1 (555) 321-6547',
          code: 'AW-005',
          RC: 'RC11223',
          NIF: 'NIF33445',
          AI: 'AI-55667',
          NIS: 'NIS-77889',
          soumis_tva: false
        }
      ];
      
      // Create each sample supplier
      for (const supplier of sampleSuppliers) {
        await supplierService.createSupplier(supplier);
      }
      
      setSuccess('Sample supplier data created successfully!');
      fetchSuppliers(); // Refresh the list
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(null), 3000);
    } catch (err: any) {
      console.error('Error creating sample data:', err);
      setError('Failed to create sample data. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateSupplier = () => {
    setEditingSupplier(null);
    reset({
      name: '',
      address: '',
      email: '',
      tel: '',
      code: '',
      RC: '',
      NIF: '',
      AI: '',
      NIS: '',
      soumis_tva: true
    });
    setIsModalOpen(true);
  };

  const handleEditSupplier = (supplier: Supplier) => {
    setEditingSupplier(supplier);
    reset({
      name: supplier.name,
      address: supplier.address,
      email: supplier.email,
      tel: supplier.tel,
      code: supplier.code,
      RC: supplier.RC,
      NIF: supplier.NIF,
      AI: supplier.AI,
      NIS: supplier.NIS,
      soumis_tva: supplier.soumis_tva
    });
    setIsModalOpen(true);
  };

  const confirmDelete = (id: number) => {
    setSupplierToDelete(id);
    setIsDeleteModalOpen(true);
  };

  const handleDeleteSupplier = async () => {
    if (!supplierToDelete) return;
    
    try {
      setIsLoading(true);
      await supplierService.deleteSupplier(supplierToDelete);
      setIsDeleteModalOpen(false);
      setSuccess('Supplier deleted successfully');
      fetchSuppliers();
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(null), 3000);
    } catch (err: any) {
      console.error('Error deleting supplier:', err);
      setError('Failed to delete supplier. Please try again.');
      setIsLoading(false);
    }
  };

  const onSubmit = async (data: any) => {
    try {
      setIsLoading(true);
      if (editingSupplier) {
        await supplierService.updateSupplier(editingSupplier.id, data);
        setSuccess('Supplier updated successfully');
      } else {
        await supplierService.createSupplier(data);
        setSuccess('Supplier created successfully');
      }
      setIsModalOpen(false);
      fetchSuppliers();
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(null), 3000);
    } catch (err: any) {
      console.error('Error saving supplier:', err);
      setError('Failed to save supplier. Please try again.');
      setIsLoading(false);
    }
  };

  const handleSearch = () => {
    if (!searchQuery) {
      fetchSuppliers();
      return;
    }
    
    setIsLoading(true);
    supplierService.searchByName(searchQuery)
      .then(data => {
        setSuppliers(data);
        setCurrentPage(1); // Reset to first page on new search
        setError(null);
      })
      .catch(err => {
        console.error('Error searching suppliers:', err);
        setError('Failed to search suppliers. Please try again.');
      })
      .finally(() => {
        setIsLoading(false);
      });
  };
  
  // Handle pagination
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = ensuredSuppliers.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(ensuredSuppliers.length / itemsPerPage);
  
  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);

  const columns = [
    { 
      header: 'Name', 
      accessor: 'name',
      render: (value: string, item: Supplier) => (
        <div className="font-medium">{value}</div>
      )
    },
    { 
      header: 'Contact', 
      accessor: 'tel',
      render: (value: string) => (
        <div className="flex items-center">
          <FiPhone className="mr-2 text-base-content/70" />
          <span>{value || 'N/A'}</span>
        </div>
      )
    },
    { 
      header: 'Email', 
      accessor: 'email',
      render: (value: string) => (
        <div className="flex items-center">
          <FiMail className="mr-2 text-base-content/70" />
          <span>{value || 'N/A'}</span>
        </div>
      )
    },
    { 
      header: 'Code', 
      accessor: 'code',
      render: (value: string) => (
        <div className="flex items-center">
          <FiFileText className="mr-2 text-base-content/70" />
          <span>{value || 'N/A'}</span>
        </div>
      )
    },
    { 
      header: 'TVA', 
      accessor: 'soumis_tva',
      render: (value: boolean) => (
        <div className={`badge ${value ? 'badge-success' : 'badge-error'} gap-1`}>
          {value ? <FiCheck size={14} /> : <FiX size={14} />}
          {value ? 'Yes' : 'No'}
        </div>
      )
    },
    {
      header: 'Actions',
      accessor: 'id',
      render: (_: any, item: Supplier) => (
        <div className="flex space-x-2">
          <button 
            className="btn btn-sm btn-ghost text-info" 
            onClick={() => handleEditSupplier(item)}
            title="Edit"
          >
            <FiEdit2 />
          </button>
          <button 
            className="btn btn-sm btn-ghost text-error" 
            onClick={() => confirmDelete(item.id)}
            title="Delete"
          >
            <FiTrash2 />
          </button>
        </div>
      )
    }
  ];

  const handleLogin = () => {
    navigate('/login');
  };

  return (
    <div className="container mx-auto px-4 py-8">
      {authError ? (
        <div className="bg-base-100 shadow-xl rounded-box overflow-hidden">
          <div className="p-6 border-b border-base-300">
            <h2 className="text-2xl font-bold">Authentication Required</h2>
            <p className="text-base-content/70">You need to be logged in to access the suppliers page</p>
          </div>
          
          <div className="p-12 flex flex-col items-center justify-center gap-6">
            <div className="text-center">
              <FiAlertCircle size={64} className="mx-auto mb-4 text-warning" />
              <h3 className="text-xl font-bold mb-2">Not Authenticated</h3>
              <p className="max-w-md mx-auto mb-6">
                You must be logged in to view and manage suppliers. Please log in with your account credentials to continue.
              </p>
              <Button onClick={handleLogin} className="btn-primary">
                <FiLogIn className="mr-2" /> Log In
              </Button>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-base-100 shadow-xl rounded-box overflow-hidden">
          <div className="p-6 border-b border-base-300">
            <h2 className="text-2xl font-bold">Suppliers</h2>
            <p className="text-base-content/70">Manage your supplier information</p>
          </div>
          
          <div className="p-6">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
            <div className="flex items-center w-full md:w-auto space-x-2">
              <div className="relative w-full md:w-64">
                <input
                  type="text"
                  placeholder="Search suppliers..."
                  className="input input-bordered w-full pr-10"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                />
                <button 
                  className="absolute right-3 top-1/2 -translate-y-1/2 text-base-content/50 hover:text-primary"
                  onClick={handleSearch}
                >
                  <FiSearch size={18} />
                </button>
              </div>
              <Button onClick={handleSearch} variant="outline" size="sm">Search</Button>
            </div>
            <Button onClick={handleCreateSupplier} className="w-full md:w-auto">
              <FiPlus className="mr-2" /> Add Supplier
            </Button>
          </div>

          {error && (
            <div className="alert alert-error mb-4">
              <FiX className="stroke-current shrink-0 h-6 w-6" />
              <span>{error}</span>
              {error.includes('No suppliers found') && (
                <button 
                  className="btn btn-sm btn-outline ml-4"
                  onClick={createSampleData}
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <span className="loading loading-spinner loading-xs mr-2"></span>
                  ) : null}
                  Create Sample Data
                </button>
              )}
            </div>
          )}

          {success && (
            <div className="alert alert-success mb-4">
              <FiCheck className="stroke-current shrink-0 h-6 w-6" />
              <span>{success}</span>
            </div>
          )}

          <div className="overflow-x-auto">
            <Table
              columns={columns}
              data={currentItems}
              isLoading={isLoading}
            />
            {!isLoading && currentItems.length === 0 && (
              <div className="text-center py-12 flex flex-col items-center gap-4">
                <p className="text-base-content/70">No suppliers found</p>
                <button 
                  className="btn btn-primary"
                  onClick={createSampleData}
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <span className="loading loading-spinner loading-xs mr-2"></span>
                  ) : (
                    <FiPlus className="mr-2" />
                  )}
                  Create Sample Data
                </button>
              </div>
            )}
          </div>
          
          {/* Pagination */}
          {ensuredSuppliers.length > 0 && (
            <div className="flex justify-center mt-6">
              <div className="join">
                <button 
                  className="join-item btn btn-sm"
                  onClick={() => paginate(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  «
                </button>
                {Array.from({ length: totalPages }, (_, i) => (
                  <button 
                    key={i} 
                    className={`join-item btn btn-sm ${currentPage === i + 1 ? 'btn-active' : ''}`}
                    onClick={() => paginate(i + 1)}
                  >
                    {i + 1}
                  </button>
                ))}
                <button 
                  className="join-item btn btn-sm"
                  onClick={() => paginate(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  »
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Supplier Form Modal */}
      <Modal
        isOpen={isModalOpen}
        title={editingSupplier ? `Edit Supplier: ${editingSupplier.name}` : 'Add New Supplier'}
        onClose={() => setIsModalOpen(false)}
        size="2xl"
      >
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="form-control">
            <label className="label">
              <span className="label-text font-medium">Name*</span>
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-base-content/50">
                <FiUser />
              </div>
              <input
                type="text"
                className={`input input-bordered w-full pl-10 ${errors.name ? 'input-error' : ''}`}
                placeholder="Enter supplier name"
                {...register('name', { required: 'Name is required' })}
              />
            </div>
            {errors.name && (
              <label className="label">
                <span className="label-text-alt text-error">{errors.name.message as string}</span>
              </label>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Address</span>
              </label>
              <textarea
                className="textarea textarea-bordered h-24"
                placeholder="Enter address"
                {...register('address')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Email</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-base-content/50">
                  <FiMail />
                </div>
                <input
                  type="email"
                  className={`input input-bordered w-full pl-10 ${errors.email ? 'input-error' : ''}`}
                  placeholder="email@example.com"
                  {...register('email', {
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: 'Invalid email address'
                    }
                  })}
                />
              </div>
              {errors.email && (
                <label className="label">
                  <span className="label-text-alt text-error">{errors.email.message as string}</span>
                </label>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Phone</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-base-content/50">
                  <FiPhone />
                </div>
                <input
                  type="text"
                  className="input input-bordered w-full pl-10"
                  placeholder="Enter phone number"
                  {...register('tel')}
                />
              </div>
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Code</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-base-content/50">
                  <FiFileText />
                </div>
                <input
                  type="text"
                  className="input input-bordered w-full pl-10"
                  placeholder="Enter supplier code"
                  {...register('code')}
                />
              </div>
            </div>
          </div>

          <div className="divider">Tax Information</div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">RC</span>
              </label>
              <input
                type="text"
                className="input input-bordered w-full"
                placeholder="Enter RC number"
                {...register('RC')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">NIF</span>
              </label>
              <input
                type="text"
                className="input input-bordered w-full"
                placeholder="Enter NIF number"
                {...register('NIF')}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">AI</span>
              </label>
              <input
                type="text"
                className="input input-bordered w-full"
                placeholder="Enter AI number"
                {...register('AI')}
              />
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">NIS</span>
              </label>
              <input
                type="text"
                className="input input-bordered w-full"
                placeholder="Enter NIS number"
                {...register('NIS')}
              />
            </div>
          </div>

          <div className="form-control bg-base-200 p-4 rounded-lg">
            <label className="label cursor-pointer justify-start gap-4">
              <input
                type="checkbox"
                className="toggle toggle-primary"
                {...register('soumis_tva')}
              />
              <div>
                <span className="label-text font-medium">Subject to TVA</span>
                <p className="text-xs text-base-content/70 mt-1">Enable if this supplier is subject to TVA taxation</p>
              </div>
            </label>
          </div>

          <div className="flex justify-end space-x-3 mt-8">
            <Button
              type="button"
              variant="outline"
              onClick={() => setIsModalOpen(false)}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? (
                <span className="loading loading-spinner loading-xs mr-2"></span>
              ) : null}
              {editingSupplier ? 'Update Supplier' : 'Create Supplier'}
            </Button>
          </div>
        </form>
      </Modal>
      
      {/* Delete Confirmation Modal */}
      <Modal
        isOpen={isDeleteModalOpen}
        title="Confirm Delete"
        onClose={() => setIsDeleteModalOpen(false)}
        size="sm"
      >
        <div className="p-4 text-center">
          <div className="text-error mb-4 flex justify-center">
            <FiTrash2 size={48} />
          </div>
          <h3 className="text-lg font-bold mb-2">Delete Supplier</h3>
          <p className="mb-6">Are you sure you want to delete this supplier? This action cannot be undone.</p>
          
          <div className="flex justify-center space-x-3">
            <Button
              type="button"
              variant="outline"
              onClick={() => setIsDeleteModalOpen(false)}
            >
              Cancel
            </Button>
            <Button 
              type="button" 
              variant="error"
              onClick={handleDeleteSupplier}
              disabled={isLoading}
            >
              {isLoading ? (
                <span className="loading loading-spinner loading-xs mr-2"></span>
              ) : null}
              Delete
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default Suppliers;
